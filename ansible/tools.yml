---
- name: Setup Docker, Jenkins, SonarQube, SonarQube Scanner, Helm, Kubectl, Trivy, Prometheus, Grafana on Amazon Linux 2023
  hosts: all
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3  # Ensure the correct Python interpreter

  tasks:

    - name: Gather facts
      setup:

    - name: Install Docker
      yum:
        name: docker
        state: present

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: true

    - name: Add the ec2-user to the Docker group
      user:
        name: ec2-user
        groups: docker
        append: yes

    - name: Notify user about re-login requirement
      debug:
        msg: "User 'ec2-user' has been added to the Docker group. Please log out and log back in to apply the changes."

    - name: Update all packages
      yum:
        name: '*'
        state: latest

    - name: Install required dependencies
      yum:
        name:
          - java-17-amazon-corretto
          - wget
        state: present

    - name: Install unzip
      yum:
        name: unzip
        state: present

    - name: Download SonarQube
      get_url:
        url: "https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.9.1.69595.zip"
        dest: /tmp/sonarqube.zip

    - name: Extract SonarQube
      unarchive:
        src: /tmp/sonarqube.zip
        dest: /opt/
        remote_src: yes
        creates: /opt/sonarqube-9.9.1.69595  # Ensures the extraction only happens if the directory does not exist

    - name: Verify SonarQube Extraction
      stat:
        path: /opt/sonarqube-9.9.1.69595
      register: sonarqube_stat

    - name: Fail if SonarQube extraction failed
      fail:
        msg: "SonarQube extraction failed, directory does not exist!"
      when: not sonarqube_stat.stat.exists

    - name: Create SonarQube user
      user:
        name: sonarqube
        system: yes

    - name: Change ownership of SonarQube directory
      file:
        path: /opt/sonarqube-9.9.1.69595
        owner: sonarqube
        group: sonarqube
        state: directory
        recurse: yes

    - name: Set up SonarQube service
      copy:
        dest: /etc/systemd/system/sonarqube.service
        content: |
          [Unit]
          Description=SonarQube service
          After=syslog.target network.target

          [Service]
          Type=forking
          ExecStart=/opt/sonarqube-9.9.1.69595/bin/linux-x86-64/sonar.sh start
          ExecStop=/opt/sonarqube-9.9.1.69595/bin/linux-x86-64/sonar.sh stop
          User=sonarqube
          Group=sonarqube
          Restart=always

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd and start SonarQube service
      systemd:
        daemon_reload: yes
        name: sonarqube
        enabled: yes
        state: started

    - name: Download SonarQube Scanner
      get_url:
        url: "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip"
        dest: /tmp/sonar-scanner.zip

    - name: Extract SonarQube Scanner
      unarchive:
        src: /tmp/sonar-scanner.zip
        dest: /opt/
        remote_src: yes

    - name: Rename extracted directory for easier access
      command: mv /opt/sonar-scanner-4.8.0.2856-linux /opt/sonar-scanner
      args:
        creates: "/opt/sonar-scanner"

    - name: Set up SonarQube Scanner in PATH
      lineinfile:
        path: /home/ec2-user/.bash_profile  
        line: 'export PATH=$PATH:/opt/sonar-scanner/bin' 
        create: yes
        state: present
        mode: '0755'

    - name: Reload environment variables
      shell: source /etc/profile.d/sonar_scanner.sh
      args:
        executable: /bin/bash

    - name: Verify SonarQube Scanner installation
      command: /opt/sonar-scanner/bin/sonar-scanner -v
      register: sonar_scanner_version

    - name: Show SonarQube Scanner version
      debug:
        var: sonar_scanner_version.stdout

    # Install the firewall module for Ansible
    - name: Install python-firewall package
      yum:
        name: python3-firewall
        state: present

    - name: Retrieve latest stable version of kubectl
      command: "curl -L -s https://dl.k8s.io/release/stable.txt"
      register: kubectl_version
      changed_when: false

    - name: Install kubectl
      get_url:
        url: "https://dl.k8s.io/release/{{ kubectl_version.stdout }}/bin/linux/amd64/kubectl"
        dest: /usr/local/bin/kubectl
        mode: '0755'
        force: yes

    - name: Ensure kubectl is executable
      command: chmod +x /usr/local/bin/kubectl

    - name: Check kubectl version
      command: /usr/local/bin/kubectl version --client
      register: kubectl_version_check
      changed_when: false

    - name: Fail if kubectl is not installed correctly
      fail:
        msg: "kubectl installation failed or version check failed."
      when: kubectl_version_check.rc != 0

    - name: Install Helm
      shell: "curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash"
      args:
        creates: /usr/local/bin/helm

    - name: Download Trivy
      get_url:
        url: https://github.com/aquasecurity/trivy/releases/download/v0.22.0/trivy_0.22.0_Linux-64bit.tar.gz
        dest: "/tmp/trivy.tar.gz"

    - name: Extract Trivy
      unarchive:
        src: "/tmp/trivy.tar.gz"
        dest: "/usr/local/bin/"
        remote_src: yes

    - name: Verify Trivy installation
      command: trivy --version
      register: trivy_version
      changed_when: false

    - name: Show Trivy version
      debug:
        var: trivy_version.stdout

    - name: Download Prometheus tarball
      get_url:
        url: "https://github.com/prometheus/prometheus/releases/download/v2.44.0/prometheus-2.44.0.linux-amd64.tar.gz"
        dest: "/tmp/prometheus-2.44.0.linux-amd64.tar.gz"

    - name: Extract Prometheus tarball
      unarchive:
        src: "/tmp/prometheus-2.44.0.linux-amd64.tar.gz"
        dest: "/tmp/"
        remote_src: yes

    - name: Move Prometheus binary to /usr/local/bin
      command:
        cmd: mv /tmp/prometheus-2.44.0.linux-amd64/prometheus /usr/local/bin/
        creates: /usr/local/bin/prometheus

    - name: Move promtool binary to /usr/local/bin
      command:
        cmd: mv /tmp/prometheus-2.44.0.linux-amd64/promtool /usr/local/bin/
        creates: /usr/local/bin/promtool

    - name: Create Prometheus configuration directory
      file:
        path: "/etc/prometheus"
        state: directory
        mode: "0755"

    - name: Move Prometheus config file to /etc/prometheus
      command:
        cmd: mv /tmp/prometheus-2.44.0.linux-amd64/prometheus.yml /etc/prometheus/prometheus.yml
        creates: /etc/prometheus/prometheus.yml

    - name: Create Prometheus systemd service file
      copy:
        dest: /etc/systemd/system/prometheus.service
        content: |
          [Unit]
          Description=Prometheus monitoring system
          Documentation=http://prometheus.io/docs/introduction/overview/
          After=network.target

          [Service]
          User=prometheus
          Group=prometheus
          ExecStart=/usr/local/bin/prometheus \
            --config.file=/etc/prometheus/prometheus.yml \
            --storage.tsdb.path=/var/lib/prometheus
          Restart=always
          LimitNOFILE=4096
          KillSignal=SIGINT
          SyslogIdentifier=prometheus

          [Install]
          WantedBy=multi-user.target

    - name: Create prometheus user
      user:
        name: prometheus
        state: present

    - name: Set permissions for Prometheus directories
      file:
        path: /var/lib/prometheus
        state: directory
        owner: prometheus
        group: prometheus
        mode: '0755'
        recurse: yes

    - name: Reload systemd and start Prometheus service
      systemd:
        daemon_reload: yes
        name: prometheus
        enabled: yes
        state: started

    - name: Check the status of the Prometheus service
      systemd:
        name: prometheus
        state: started
        enabled: yes

    # Grafana Installation
    - name: Add Grafana repository
      yum_repository:
        name: grafana
        description: Grafana
        baseurl: https://packages.grafana.com/oss/rpm
        gpgcheck: no
        enabled: yes

    - name: Install Grafana
      yum:
        name: grafana
        state: present

    - name: Start and enable Grafana service
      systemd:
        name: grafana-server
        state: started
        enabled: true

    - name: Open Grafana port in firewall (if applicable)
      ansible.builtin.command:
        cmd: iptables -I INPUT -p tcp --dport 3000 -j ACCEPT
      when: ansible_facts.os_family == "Amazon"
